/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignOutRouteRouteImport } from './routes/sign-out.route'
import { Route as SignInRouteRouteImport } from './routes/sign-in.route'
import { Route as CallbackRouteRouteImport } from './routes/callback.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DataIndexRouteRouteImport } from './routes/data/index.route'
import { Route as OrganizationSetupIndexRouteRouteImport } from './routes/organization/setup/index.route'
import { Route as OrganizationSetupSuccessRouteRouteImport } from './routes/organization/setup/success.route'

const SignOutRouteRoute = SignOutRouteRouteImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRouteRoute = SignInRouteRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const CallbackRouteRoute = CallbackRouteRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataIndexRouteRoute = DataIndexRouteRouteImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationSetupIndexRouteRoute =
  OrganizationSetupIndexRouteRouteImport.update({
    id: '/organization/setup/',
    path: '/organization/setup/',
    getParentRoute: () => rootRouteImport,
  } as any)
const OrganizationSetupSuccessRouteRoute =
  OrganizationSetupSuccessRouteRouteImport.update({
    id: '/organization/setup/success',
    path: '/organization/setup/success',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/callback': typeof CallbackRouteRoute
  '/sign-in': typeof SignInRouteRoute
  '/sign-out': typeof SignOutRouteRoute
  '/data': typeof DataIndexRouteRoute
  '/organization/setup/success': typeof OrganizationSetupSuccessRouteRoute
  '/organization/setup': typeof OrganizationSetupIndexRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/callback': typeof CallbackRouteRoute
  '/sign-in': typeof SignInRouteRoute
  '/sign-out': typeof SignOutRouteRoute
  '/data': typeof DataIndexRouteRoute
  '/organization/setup/success': typeof OrganizationSetupSuccessRouteRoute
  '/organization/setup': typeof OrganizationSetupIndexRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/callback': typeof CallbackRouteRoute
  '/sign-in': typeof SignInRouteRoute
  '/sign-out': typeof SignOutRouteRoute
  '/data/': typeof DataIndexRouteRoute
  '/organization/setup/success': typeof OrganizationSetupSuccessRouteRoute
  '/organization/setup/': typeof OrganizationSetupIndexRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/callback'
    | '/sign-in'
    | '/sign-out'
    | '/data'
    | '/organization/setup/success'
    | '/organization/setup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/callback'
    | '/sign-in'
    | '/sign-out'
    | '/data'
    | '/organization/setup/success'
    | '/organization/setup'
  id:
    | '__root__'
    | '/'
    | '/callback'
    | '/sign-in'
    | '/sign-out'
    | '/data/'
    | '/organization/setup/success'
    | '/organization/setup/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CallbackRouteRoute: typeof CallbackRouteRoute
  SignInRouteRoute: typeof SignInRouteRoute
  SignOutRouteRoute: typeof SignOutRouteRoute
  DataIndexRouteRoute: typeof DataIndexRouteRoute
  OrganizationSetupSuccessRouteRoute: typeof OrganizationSetupSuccessRouteRoute
  OrganizationSetupIndexRouteRoute: typeof OrganizationSetupIndexRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-out': {
      id: '/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof SignOutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/': {
      id: '/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataIndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization/setup/': {
      id: '/organization/setup/'
      path: '/organization/setup'
      fullPath: '/organization/setup'
      preLoaderRoute: typeof OrganizationSetupIndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization/setup/success': {
      id: '/organization/setup/success'
      path: '/organization/setup/success'
      fullPath: '/organization/setup/success'
      preLoaderRoute: typeof OrganizationSetupSuccessRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CallbackRouteRoute: CallbackRouteRoute,
  SignInRouteRoute: SignInRouteRoute,
  SignOutRouteRoute: SignOutRouteRoute,
  DataIndexRouteRoute: DataIndexRouteRoute,
  OrganizationSetupSuccessRouteRoute: OrganizationSetupSuccessRouteRoute,
  OrganizationSetupIndexRouteRoute: OrganizationSetupIndexRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
